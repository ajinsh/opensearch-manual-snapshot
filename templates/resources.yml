AWSTemplateFormatVersion: 2010-09-09
Description: |
    Cloudformation stack for scheudling manual snapshots for Opensearch using 
    Lambda and Event Bridge Schedules
Parameters:
  OpensearchDomainName:
    Description: The name for the Opensearch domain
    Type: String  
  OpensearchVPC:
    Description: VPC for Opensearch with public and private subnets
    Type: AWS::EC2::VPC::Id
  OpensearchVPCSubnet:
    Description: Select private subnets belonging to VPC for Opensearch
    Type: List<AWS::EC2::Subnet::Id>
  OpensearchVPCSG:
    Description: Select security group to be applied Opensearch inside VPC for each Availability Zone
    Type: AWS::EC2::SecurityGroup::Id
  MasterInstanceType:
    Description: The instance type for the Master Node
    Type: String
    Default: t3.medium.search
    AllowedValues:
      - t3.micro.search
      - t3.medium.search
  MasterInstanceCount:
    Description: The instance count for the Master Node
    Type: Number
    MinValue: 3
  AZCount:
    Description: The Availability Zone for the Data Nodes
    Type: Number
    AllowedValues:
      - 2
      - 3
    Default:  2
  DataInstanceType:
    Description: The instance type for the Data Node
    Type: String
    Default: t3.medium.search
    AllowedValues:
      - t3.micro.search
      - t3.medium.search
  DataInstanceCount:
    Description: The instance count for the Data Node
    Type: Number
    MinValue: 2  
  MasterUName:
    Description: The user name for internal user database user
    Type: String
    Default: ''
  MasterUPWD:
    Description: The password for internal user database password
    Type: String
    NoEcho: true
    Default: ''
  AOSSVersion:
    Description: The version for AWS Opensearch
    Type: String
    AllowedValues:
      - OpenSearch_2.3
      - OpenSearch_1.3   
      - OpenSearch_1.2
      - OpenSearch_1.1  
      - OpenSearch_1.0
      - Elasticsearch_7.10
  LambdaIAMRole:
    Description: The IAM role for the Lambda function to connect to AWS Opensearch
    Type: String
  S3bucketName:
    Description: The Name of the S3 bucket that was created earlier
    Type: String
  LambdaFunctionName:
    Description: The Name of the Lambda Function
    Type: String   
  SnapshotRepoName:
    Description: The Name for the Snapshot Repo/ S3 bucket storing the snapshot and was created earlier
    Type: String
  SnapshotPrefix:
    Description: The Snapshot Prefix to be appended with the manual snapshot
    Type: String
  SchedulerExpression:
    Description: 'Enter the cron expression for the desired schedule. Eg: enter - cron(59/59 16-18 * * ? *)'  
    Type: String
Conditions:
  NoDedicatedMaster: !Equals [!Ref MasterInstanceCount, 0]
  IsFGACEnabled:  !Not [!And [ !Equals [ !Ref MasterUName, ''], !Equals [ !Ref MasterUPWD, ''] ]]
  IsDualAZ: !Equals [!Ref AZCount, 2]
Resources:
  OpensearchCluster:
    Type: AWS::OpenSearchService::Domain
    Properties:
      AccessPolicies: 
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: '*'
            Action: 'es:*'
            Resource: !Join [ ':', [ !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/', !Ref OpensearchDomainName ] ]
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: 'true'
      ClusterConfig:
        DedicatedMasterCount: !If [NoDedicatedMaster, !Ref AWS::NoValue, !Ref MasterInstanceCount]
        DedicatedMasterEnabled: !If [NoDedicatedMaster, false, true]
        DedicatedMasterType: !If [NoDedicatedMaster, !Ref AWS::NoValue, !Ref MasterInstanceType]
        InstanceCount: !Ref DataInstanceCount
        InstanceType: !Ref DataInstanceType
        ZoneAwarenessEnabled: true
        ZoneAwarenessConfig:
          AvailabilityZoneCount: !Ref AZCount
      DomainName: !Ref OpensearchDomainName
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      EncryptionAtRestOptions:
        Enabled: true
      EngineVersion: !Ref AOSSVersion
      NodeToNodeEncryptionOptions:
        Enabled: true
      DomainEndpointOptions:
        EnforceHTTPS: !If [IsFGACEnabled, 'true', 'false']
      VPCOptions:
        SecurityGroupIds:
          - !Ref OpensearchVPCSG
        SubnetIds:
          - !Select [0, !Ref OpensearchVPCSubnet]
          - !Select [1, !Ref OpensearchVPCSubnet]
          - !If [IsDualAZ, !Ref AWS::NoValue, !Select [2, !Ref OpensearchVPCSubnet]]
      AdvancedSecurityOptions:
          Enabled: !If [IsFGACEnabled, 'true', 'false']
          InternalUserDatabaseEnabled:  !If [IsFGACEnabled, 'true', 'false']
          MasterUserOptions:
            MasterUserName:  !If [IsFGACEnabled, !Ref MasterUName, !Ref AWS::NoValue]
            MasterUserPassword: !If [IsFGACEnabled, !Ref MasterUPWD, !Ref AWS::NoValue]
  OpensearchVPCSGIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref OpensearchVPCSG
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref OpensearchVPCSG
  LambdaAOSIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action:
                - 'sts:AssumeRole'
      Description: "Allows Lambda functions to call AWS services on your behalf."
      ManagedPolicyArns: 
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      Path: /
      Policies:
        - PolicyName: Lambda-Access-ES-n-S3 # Create inline policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'es:*'
                  - 's3:Get*'
                Resource: 
                  - !Join [ ':', [ !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/', !Ref OpensearchDomainName ] ]
                  - !Sub 
                    - 'arn:aws:s3:::${AOSS3Bucket}/*' 
                    - AOSS3Bucket: !Ref S3bucketName
      RoleName: !Ref LambdaIAMRole
  LambdaAOS:
    Type: AWS::Lambda::Function
    DependsOn:
      - "OpensearchCluster"
    Properties:
      Architectures: 
        - x86_64
      Code:
        S3Bucket: !Ref S3bucketName
        S3Key: 'Opensearch-Manual-Snapshot.zip'
      Description: "The Lambda Function that access the Opensearch Cluster"
      FunctionName: !Ref LambdaFunctionName
      Handler: 'index.handler'
      MemorySize: 128
      PackageType: Zip
      Role: !GetAtt LambdaAOSIAMRole.Arn # Required
      Runtime: 'python3.9'
      Timeout: 120
      Environment:
        Variables:
          AOSS_ENDPOINT: !GetAtt OpensearchCluster.DomainEndpoint
          AOSS_REGION: !Ref AWS::Region
          SNAPSHOT_REPO_NAME: !Ref SnapshotRepoName
          SNAPSHOT_PREFIX:  !Ref SnapshotPrefix
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - !Ref OpensearchVPCSG
        SubnetIds:
          - !Select [0, !Ref OpensearchVPCSubnet]
          - !Select [1, !Ref OpensearchVPCSubnet]
          - !If [IsDualAZ, !Ref AWS::NoValue, !Select [2, !Ref OpensearchVPCSubnet]]
  EventBridgeSchedulerRole:
    Type: AWS::IAM::Role
    DependsOn:
      - "LambdaAOS"
    Properties:
      AssumeRolePolicyDocument: # Required
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - scheduler.amazonaws.com
              Action:
                - 'sts:AssumeRole'
      Description: "Event bridge role for invoking the target lambda function"
      Path: '/service-role/'
      Policies: 
        - PolicyName: !Sub "Amazon-EventBridge-Scheduler-Execution-Policy-For-Lambda-Target-${AWS::StackName}" # Create inline policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: 
                  - !GetAtt LambdaAOS.Arn
                  - !Join [ ":", [ !GetAtt LambdaAOS.Arn, "*" ] ]
      RoleName: !Sub "Amazon_EventBridge_Scheduler_LAMBDA_OPENSEARCH-${AWS::StackName}"
  LambdaEventSchedule:
    Type: AWS::Scheduler::Schedule
    DependsOn:
      - "LambdaAOS"
      - "EventBridgeSchedulerRole"
    Properties:
      Description: "The Scheduler for triggering Lambda to take manual snapshot"
      Name: !Sub "lambda-event-opensearch-manual-snapshot-schedule-${AWS::StackName}"
      # cron(minutes hours day-of-month month day-of-week year)
      ScheduleExpression: !Ref SchedulerExpression # Required
      FlexibleTimeWindow:
        Mode: 'OFF'
      Target:
        Arn: !GetAtt LambdaAOS.Arn
        RoleArn: !GetAtt EventBridgeSchedulerRole.Arn
Outputs:
  OpensearchEndpoint:
    Description: AWS Opensearch Endpoint
    Value: !GetAtt OpensearchCluster.DomainEndpoint
  AOSSS3Bucket:
    Description: ARN of the S3 Bucket containing deployment Code
    Value: !Sub 'arn:aws:s3:::${S3bucketName}'
